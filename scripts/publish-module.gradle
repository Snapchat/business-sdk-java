apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'Snap Conversions API'
                    description = 'Snap Conversions API'
                    url = 'https://github.com/Snapchat/business-sdk-java'

                    licenses {
                        license {
                            name = 'Snapchat License'
                            url = 'https://github.com/Snapchat/business-sdk-java/blob/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'snapchat'
                            name = 'Snapchat'
                            email = 'attribution-team@snapchat.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/Snapchat/business-sdk-java.git'
                        developerConnection = 'scm:git:ssh://github.com/Snapchat/business-sdk-java.git'
                        url = 'https://github.com/Snapchat/business-sdk-java'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}