/*
 * Snap Conversions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.snap.business.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.snap.business.sdk.model.CapiEvent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.snap.business.sdk.JSON;

/**
 * ResponseLogsLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResponseLogsLog {
  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EVENT_CONVERSION_TYPE = "event_conversion_type";
  @SerializedName(SERIALIZED_NAME_EVENT_CONVERSION_TYPE)
  private String eventConversionType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_INTEGRATION = "integration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION)
  private String integration;

  public static final String SERIALIZED_NAME_EVENT_METADATA = "event_metadata";
  @SerializedName(SERIALIZED_NAME_EVENT_METADATA)
  private CapiEvent eventMetadata;

  public static final String SERIALIZED_NAME_ERROR_RECORDS = "error_records";
  @SerializedName(SERIALIZED_NAME_ERROR_RECORDS)
  private List<String> errorRecords = null;

  public static final String SERIALIZED_NAME_WARNING_RECORDS = "warning_records";
  @SerializedName(SERIALIZED_NAME_WARNING_RECORDS)
  private List<String> warningRecords = null;

  public ResponseLogsLog() { 
  }

  public ResponseLogsLog timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public ResponseLogsLog eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public ResponseLogsLog eventConversionType(String eventConversionType) {
    
    this.eventConversionType = eventConversionType;
    return this;
  }

   /**
   * Get eventConversionType
   * @return eventConversionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventConversionType() {
    return eventConversionType;
  }


  public void setEventConversionType(String eventConversionType) {
    this.eventConversionType = eventConversionType;
  }


  public ResponseLogsLog status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ResponseLogsLog integration(String integration) {
    
    this.integration = integration;
    return this;
  }

   /**
   * Get integration
   * @return integration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIntegration() {
    return integration;
  }


  public void setIntegration(String integration) {
    this.integration = integration;
  }


  public ResponseLogsLog eventMetadata(CapiEvent eventMetadata) {
    
    this.eventMetadata = eventMetadata;
    return this;
  }

   /**
   * Get eventMetadata
   * @return eventMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CapiEvent getEventMetadata() {
    return eventMetadata;
  }


  public void setEventMetadata(CapiEvent eventMetadata) {
    this.eventMetadata = eventMetadata;
  }


  public ResponseLogsLog errorRecords(List<String> errorRecords) {
    
    this.errorRecords = errorRecords;
    return this;
  }

  public ResponseLogsLog addErrorRecordsItem(String errorRecordsItem) {
    if (this.errorRecords == null) {
      this.errorRecords = new ArrayList<>();
    }
    this.errorRecords.add(errorRecordsItem);
    return this;
  }

   /**
   * Get errorRecords
   * @return errorRecords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getErrorRecords() {
    return errorRecords;
  }


  public void setErrorRecords(List<String> errorRecords) {
    this.errorRecords = errorRecords;
  }


  public ResponseLogsLog warningRecords(List<String> warningRecords) {
    
    this.warningRecords = warningRecords;
    return this;
  }

  public ResponseLogsLog addWarningRecordsItem(String warningRecordsItem) {
    if (this.warningRecords == null) {
      this.warningRecords = new ArrayList<>();
    }
    this.warningRecords.add(warningRecordsItem);
    return this;
  }

   /**
   * Get warningRecords
   * @return warningRecords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWarningRecords() {
    return warningRecords;
  }


  public void setWarningRecords(List<String> warningRecords) {
    this.warningRecords = warningRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseLogsLog responseLogsLog = (ResponseLogsLog) o;
    return Objects.equals(this.timestamp, responseLogsLog.timestamp) &&
        Objects.equals(this.eventType, responseLogsLog.eventType) &&
        Objects.equals(this.eventConversionType, responseLogsLog.eventConversionType) &&
        Objects.equals(this.status, responseLogsLog.status) &&
        Objects.equals(this.integration, responseLogsLog.integration) &&
        Objects.equals(this.eventMetadata, responseLogsLog.eventMetadata) &&
        Objects.equals(this.errorRecords, responseLogsLog.errorRecords) &&
        Objects.equals(this.warningRecords, responseLogsLog.warningRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, eventType, eventConversionType, status, integration, eventMetadata, errorRecords, warningRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseLogsLog {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventConversionType: ").append(toIndentedString(eventConversionType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
    sb.append("    eventMetadata: ").append(toIndentedString(eventMetadata)).append("\n");
    sb.append("    errorRecords: ").append(toIndentedString(errorRecords)).append("\n");
    sb.append("    warningRecords: ").append(toIndentedString(warningRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timestamp");
    openapiFields.add("event_type");
    openapiFields.add("event_conversion_type");
    openapiFields.add("status");
    openapiFields.add("integration");
    openapiFields.add("event_metadata");
    openapiFields.add("error_records");
    openapiFields.add("warning_records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ResponseLogsLog
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ResponseLogsLog.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseLogsLog is not found in the empty JSON string", ResponseLogsLog.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ResponseLogsLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseLogsLog` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if (jsonObj.get("event_conversion_type") != null && !jsonObj.get("event_conversion_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_conversion_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_conversion_type").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("integration") != null && !jsonObj.get("integration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration").toString()));
      }
      // validate the optional field `event_metadata`
      if (jsonObj.getAsJsonObject("event_metadata") != null) {
        CapiEvent.validateJsonObject(jsonObj.getAsJsonObject("event_metadata"));
      }
      // ensure the json data is an array
      if (jsonObj.get("error_records") != null && !jsonObj.get("error_records").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_records` to be an array in the JSON string but got `%s`", jsonObj.get("error_records").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("warning_records") != null && !jsonObj.get("warning_records").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning_records` to be an array in the JSON string but got `%s`", jsonObj.get("warning_records").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseLogsLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseLogsLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseLogsLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseLogsLog.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseLogsLog>() {
           @Override
           public void write(JsonWriter out, ResponseLogsLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseLogsLog read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResponseLogsLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResponseLogsLog
  * @throws IOException if the JSON string is invalid with respect to ResponseLogsLog
  */
  public static ResponseLogsLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseLogsLog.class);
  }

 /**
  * Convert an instance of ResponseLogsLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

