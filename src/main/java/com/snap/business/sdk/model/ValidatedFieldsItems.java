/*
 * Snap Conversions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.snap.business.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.snap.business.sdk.JSON;

/**
 * ValidatedFieldsItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValidatedFieldsItems {
  public static final String SERIALIZED_NAME_PIXEL_ID = "pixel_id";
  @SerializedName(SERIALIZED_NAME_PIXEL_ID)
  private String pixelId;

  public static final String SERIALIZED_NAME_SNAP_APP_ID = "snap_app_id";
  @SerializedName(SERIALIZED_NAME_SNAP_APP_ID)
  private String snapAppId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_EVENT_CONVERSION_TYPE = "event_conversion_type";
  @SerializedName(SERIALIZED_NAME_EVENT_CONVERSION_TYPE)
  private String eventConversionType;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public ValidatedFieldsItems() { 
  }

  public ValidatedFieldsItems pixelId(String pixelId) {
    
    this.pixelId = pixelId;
    return this;
  }

   /**
   * Get pixelId
   * @return pixelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPixelId() {
    return pixelId;
  }


  public void setPixelId(String pixelId) {
    this.pixelId = pixelId;
  }


  public ValidatedFieldsItems snapAppId(String snapAppId) {
    
    this.snapAppId = snapAppId;
    return this;
  }

   /**
   * Get snapAppId
   * @return snapAppId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSnapAppId() {
    return snapAppId;
  }


  public void setSnapAppId(String snapAppId) {
    this.snapAppId = snapAppId;
  }


  public ValidatedFieldsItems currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ValidatedFieldsItems price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }


  public ValidatedFieldsItems eventConversionType(String eventConversionType) {
    
    this.eventConversionType = eventConversionType;
    return this;
  }

   /**
   * Get eventConversionType
   * @return eventConversionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventConversionType() {
    return eventConversionType;
  }


  public void setEventConversionType(String eventConversionType) {
    this.eventConversionType = eventConversionType;
  }


  public ValidatedFieldsItems eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidatedFieldsItems validatedFieldsItems = (ValidatedFieldsItems) o;
    return Objects.equals(this.pixelId, validatedFieldsItems.pixelId) &&
        Objects.equals(this.snapAppId, validatedFieldsItems.snapAppId) &&
        Objects.equals(this.currency, validatedFieldsItems.currency) &&
        Objects.equals(this.price, validatedFieldsItems.price) &&
        Objects.equals(this.eventConversionType, validatedFieldsItems.eventConversionType) &&
        Objects.equals(this.eventType, validatedFieldsItems.eventType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pixelId, snapAppId, currency, price, eventConversionType, eventType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatedFieldsItems {\n");
    sb.append("    pixelId: ").append(toIndentedString(pixelId)).append("\n");
    sb.append("    snapAppId: ").append(toIndentedString(snapAppId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    eventConversionType: ").append(toIndentedString(eventConversionType)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pixel_id");
    openapiFields.add("snap_app_id");
    openapiFields.add("currency");
    openapiFields.add("price");
    openapiFields.add("event_conversion_type");
    openapiFields.add("event_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ValidatedFieldsItems
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ValidatedFieldsItems.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidatedFieldsItems is not found in the empty JSON string", ValidatedFieldsItems.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ValidatedFieldsItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidatedFieldsItems` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("pixel_id") != null && !jsonObj.get("pixel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pixel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pixel_id").toString()));
      }
      if (jsonObj.get("snap_app_id") != null && !jsonObj.get("snap_app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snap_app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snap_app_id").toString()));
      }
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if (jsonObj.get("event_conversion_type") != null && !jsonObj.get("event_conversion_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_conversion_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_conversion_type").toString()));
      }
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidatedFieldsItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidatedFieldsItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidatedFieldsItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidatedFieldsItems.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidatedFieldsItems>() {
           @Override
           public void write(JsonWriter out, ValidatedFieldsItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidatedFieldsItems read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValidatedFieldsItems given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValidatedFieldsItems
  * @throws IOException if the JSON string is invalid with respect to ValidatedFieldsItems
  */
  public static ValidatedFieldsItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidatedFieldsItems.class);
  }

 /**
  * Convert an instance of ValidatedFieldsItems to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

